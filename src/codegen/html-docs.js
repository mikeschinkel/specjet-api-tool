class HtmlDocumentationGenerator {
  constructor(contract, mockServer = null) {
    this.contract = contract;
    this.mockServer = mockServer;
    this.info = contract.info || {};
    this.endpoints = contract.endpoints || [];
    this.schemas = contract.schemas || {};
  }

  generateHtml() {
    const title = this.info.title || 'API Documentation';
    const description = this.info.description || 'API documentation generated by SpecJet';
    const version = this.info.version || '1.0.0';

    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${this.escapeHtml(title)}</title>
    <style>
        ${this.generateCSS()}
    </style>
</head>
<body>
    <div class="app" id="app">
        <header class="header">
            <div class="header-content">
                <h1>${this.escapeHtml(title)}</h1>
                <div class="header-meta">
                    <span class="version">v${this.escapeHtml(version)}</span>
                    <button class="theme-toggle" onclick="toggleTheme()" title="Toggle theme">ðŸŒ“</button>
                </div>
            </div>
        </header>

        <div class="container">
            <aside class="sidebar">
                
                <nav class="nav">
                    <div class="nav-section">
                        <h3>Overview</h3>
                        <a href="#overview" class="nav-link">API Overview</a>
                        <a href="#schemas" class="nav-link">Data Models</a>
                    </div>
                    
                    ${this.generateNavigationSections()}
                </nav>
            </aside>

            <main class="content">
                <section id="overview" class="section">
                    <h2>API Overview</h2>
                    <p>${this.escapeHtml(description)}</p>
                    
                    <div class="stats">
                        <div class="stat">
                            <span class="stat-number">${this.endpoints.length}</span>
                            <span class="stat-label">Endpoints</span>
                        </div>
                        <div class="stat">
                            <span class="stat-number">${Object.keys(this.schemas).length}</span>
                            <span class="stat-label">Schemas</span>
                        </div>
                        <div class="stat">
                            <span class="stat-number">${this.getUniqueTagsCount()}</span>
                            <span class="stat-label">Categories</span>
                        </div>
                    </div>

                    <div class="base-url">
                        <h3>Base URL</h3>
                        <code>http://localhost:3001</code>
                    </div>
                </section>

                ${this.generateEndpointSections()}
                
                <section id="schemas" class="section">
                    <h2>Data Models</h2>
                    ${this.generateSchemasSection()}
                </section>
            </main>
        </div>
    </div>

    <script>
        ${this.generateJavaScript()}
    </script>
</body>
</html>`;
  }

  generateCSS() {
    return `
        :root {
            --bg-primary: #ffffff;
            --bg-secondary: #f8f9fa;
            --bg-tertiary: #e9ecef;
            --text-primary: #212529;
            --text-secondary: #6c757d;
            --border-color: #dee2e6;
            --accent-color: #007bff;
            --accent-hover: #0056b3;
            --success-color: #28a745;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
            --info-color: #17a2b8;
            --code-bg: #f8f9fa;
            --shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }

        [data-theme="dark"] {
            --bg-primary: #1a1a1a;
            --bg-secondary: #2d2d2d;
            --bg-tertiary: #3d3d3d;
            --text-primary: #ffffff;
            --text-secondary: #b0b0b0;
            --border-color: #404040;
            --accent-color: #4dabf7;
            --accent-hover: #339af0;
            --code-bg: #2d2d2d;
            --shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.3);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: var(--text-primary);
            background: var(--bg-primary);
            transition: background-color 0.3s ease;
        }

        .app {
            min-height: 100vh;
        }

        .header {
            background: var(--bg-secondary);
            border-bottom: 1px solid var(--border-color);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header h1 {
            font-size: 1.75rem;
            font-weight: 600;
            color: var(--text-primary);
        }

        .header-meta {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .version {
            background: var(--accent-color);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .theme-toggle {
            background: none;
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            padding: 0.5rem;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .theme-toggle:hover {
            background: var(--bg-tertiary);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 2rem;
            padding: 2rem;
        }

        .sidebar {
            position: sticky;
            top: 100px;
            height: fit-content;
            max-height: calc(100vh - 120px);
            overflow-y: auto;
        }


        .nav-section h3 {
            font-size: 0.875rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            color: var(--text-secondary);
            margin-bottom: 0.5rem;
            margin-top: 1.5rem;
        }

        .nav-section:first-child h3 {
            margin-top: 0;
        }

        .nav-link {
            display: block;
            padding: 0.5rem 0;
            color: var(--text-secondary);
            text-decoration: none;
            transition: color 0.3s ease;
            border-left: 2px solid transparent;
            padding-left: 0.75rem;
            margin-left: -0.75rem;
        }

        .nav-link:hover,
        .nav-link.active {
            color: var(--accent-color);
            border-left-color: var(--accent-color);
        }

        .content {
            min-width: 0;
        }

        .section {
            margin-bottom: 3rem;
            padding-bottom: 2rem;
            border-bottom: 1px solid var(--border-color);
        }

        .section:last-child {
            border-bottom: none;
        }

        .section h2 {
            font-size: 1.875rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--text-primary);
        }

        .stats {
            display: flex;
            gap: 2rem;
            margin: 2rem 0;
        }

        .stat {
            text-align: center;
        }

        .stat-number {
            display: block;
            font-size: 2rem;
            font-weight: bold;
            color: var(--accent-color);
        }

        .stat-label {
            font-size: 0.875rem;
            color: var(--text-secondary);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .base-url {
            background: var(--bg-secondary);
            padding: 1.5rem;
            border-radius: 0.5rem;
            margin: 2rem 0;
        }

        .base-url h3 {
            margin-bottom: 0.5rem;
            color: var(--text-primary);
        }

        .base-url code {
            font-family: 'Monaco', 'Consolas', monospace;
            background: var(--code-bg);
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
            border: 1px solid var(--border-color);
            display: inline-block;
        }

        .endpoint {
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-radius: 0.75rem;
            margin-bottom: 1.5rem;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .endpoint-header {
            padding: 1rem 1.5rem;
            background: var(--bg-tertiary);
            border-bottom: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .endpoint-title {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .http-method {
            padding: 0.25rem 0.75rem;
            border-radius: 0.25rem;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            color: white;
        }

        .method-get { background: var(--success-color); }
        .method-post { background: var(--accent-color); }
        .method-put { background: var(--warning-color); color: var(--text-primary); }
        .method-patch { background: var(--info-color); }
        .method-delete { background: var(--danger-color); }

        .endpoint-path {
            font-family: 'Monaco', 'Consolas', monospace;
            font-size: 1.125rem;
            font-weight: 500;
        }

        .endpoint-body {
            padding: 1.5rem;
        }

        .endpoint-description {
            color: var(--text-secondary);
            margin-bottom: 1.5rem;
        }

        .endpoint-section {
            margin-bottom: 1.5rem;
        }

        .endpoint-section h4 {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 0.75rem;
            color: var(--text-primary);
        }

        .parameters-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 1rem;
        }

        .parameters-table th,
        .parameters-table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }

        .parameters-table th {
            background: var(--bg-tertiary);
            font-weight: 600;
            font-size: 0.875rem;
            color: var(--text-primary);
        }

        .parameters-table td {
            font-size: 0.875rem;
        }

        .param-name {
            font-family: 'Monaco', 'Consolas', monospace;
            font-weight: 500;
        }

        .param-required {
            color: var(--danger-color);
            font-size: 0.75rem;
            font-weight: 600;
        }

        .param-type {
            color: var(--accent-color);
            font-size: 0.875rem;
        }

        .code-block {
            background: var(--code-bg);
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            padding: 1rem;
            margin: 1rem 0;
            position: relative;
            overflow-x: auto;
        }

        .code-block pre {
            margin: 0;
            font-family: 'Monaco', 'Consolas', monospace;
            font-size: 0.875rem;
            line-height: 1.5;
            color: var(--text-primary);
        }

        .copy-button {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            background: var(--accent-color);
            color: white;
            border: none;
            border-radius: 0.25rem;
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .code-block:hover .copy-button {
            opacity: 1;
        }

        .copy-button:hover {
            background: var(--accent-hover);
        }

        .schema {
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            margin-bottom: 1.5rem;
            overflow: hidden;
        }

        .schema-header {
            background: var(--bg-tertiary);
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--border-color);
        }

        .schema-name {
            font-size: 1.25rem;
            font-weight: 600;
            font-family: 'Monaco', 'Consolas', monospace;
            color: var(--text-primary);
        }

        .schema-body {
            padding: 1.5rem;
        }

        .property {
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .property:last-child {
            margin-bottom: 0;
            padding-bottom: 0;
            border-bottom: none;
        }

        .property-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.25rem;
        }

        .property-name {
            font-family: 'Monaco', 'Consolas', monospace;
            font-weight: 500;
            color: var(--text-primary);
        }

        .property-type {
            color: var(--accent-color);
            font-size: 0.875rem;
            font-weight: 500;
        }

        .property-description {
            color: var(--text-secondary);
            font-size: 0.875rem;
        }

        .mock-data {
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            padding: 1rem;
            margin: 1rem 0;
        }


        @media (max-width: 768px) {
            .container {
                grid-template-columns: 1fr;
                padding: 1rem;
            }

            .sidebar {
                position: static;
                margin-bottom: 2rem;
            }

            .header-content {
                padding: 0 1rem;
            }

            .stats {
                flex-direction: column;
                gap: 1rem;
            }

            .endpoint-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }
        }

    `;
  }

  generateNavigationSections() {
    const tagGroups = this.groupEndpointsByTag();
    
    return Object.entries(tagGroups).map(([tag, endpoints]) => {
      return `
                    <div class="nav-section">
                        <h3>${this.escapeHtml(tag)}</h3>
                        ${endpoints.map(endpoint => {
                          const endpointId = this.generateEndpointId(endpoint);
                          const methodName = (endpoint.summary || `${endpoint.method} ${endpoint.path}`);
                          return `<a href="#${endpointId}" class="nav-link">${this.escapeHtml(methodName)}</a>`;
                        }).join('')}
                    </div>
      `;
    }).join('');
  }

  generateEndpointSections() {
    const tagGroups = this.groupEndpointsByTag();
    
    return Object.entries(tagGroups).map(([tag, endpoints]) => {
      const sectionId = this.generateSectionId(tag);
      
      return `
                <section id="${sectionId}" class="section">
                    <h2>${this.escapeHtml(tag)}</h2>
                    
                    ${endpoints.map(endpoint => this.generateEndpointCard(endpoint)).join('')}
                </section>
      `;
    }).join('');
  }

  generateEndpointCard(endpoint) {
    const endpointId = this.generateEndpointId(endpoint);
    const method = endpoint.method.toLowerCase();
    const methodClass = `method-${method}`;
    
    return `
                    <div id="${endpointId}" class="endpoint">
                        <div class="endpoint-header">
                            <div class="endpoint-title">
                                <span class="http-method ${methodClass}">${endpoint.method}</span>
                                <span class="endpoint-path">${this.escapeHtml(endpoint.path)}</span>
                            </div>
                        </div>
                        
                        <div class="endpoint-body">
                            ${endpoint.summary ? `<p class="endpoint-description">${this.escapeHtml(endpoint.summary)}</p>` : ''}
                            ${endpoint.description && endpoint.description !== endpoint.summary ? `<p class="endpoint-description">${this.escapeHtml(endpoint.description)}</p>` : ''}
                            
                            ${this.generateParametersSection(endpoint)}
                            ${this.generateRequestBodySection(endpoint)}
                            ${this.generateResponsesSection(endpoint)}
                            ${this.generateCodeExamples(endpoint)}
                            ${this.generateMockDataSection(endpoint)}
                        </div>
                    </div>
    `;
  }

  generateParametersSection(endpoint) {
    if (!endpoint.parameters || endpoint.parameters.length === 0) {
      return '';
    }

    const pathParams = endpoint.parameters.filter(p => p.in === 'path');
    const queryParams = endpoint.parameters.filter(p => p.in === 'query');
    const headerParams = endpoint.parameters.filter(p => p.in === 'header');

    let html = '';

    if (pathParams.length > 0) {
      html += this.generateParameterTable('Path Parameters', pathParams);
    }

    if (queryParams.length > 0) {
      html += this.generateParameterTable('Query Parameters', queryParams);
    }

    if (headerParams.length > 0) {
      html += this.generateParameterTable('Header Parameters', headerParams);
    }

    return html;
  }

  generateParameterTable(title, parameters) {
    return `
                            <div class="endpoint-section">
                                <h4>${title}</h4>
                                <table class="parameters-table">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Type</th>
                                            <th>Required</th>
                                            <th>Description</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${parameters.map(param => `
                                            <tr>
                                                <td class="param-name">${this.escapeHtml(param.name)}</td>
                                                <td class="param-type">${this.getSchemaType(param.schema)}</td>
                                                <td>${param.required ? '<span class="param-required">Required</span>' : 'Optional'}</td>
                                                <td>${param.description ? this.escapeHtml(param.description) : '-'}</td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
    `;
  }

  generateRequestBodySection(endpoint) {
    if (!endpoint.requestBody) {
      return '';
    }

    const schema = endpoint.requestBody.schema;
    const required = endpoint.requestBody.required ? 'Required' : 'Optional';

    return `
                            <div class="endpoint-section">
                                <h4>Request Body (${required})</h4>
                                ${endpoint.requestBody.description ? `<p>${this.escapeHtml(endpoint.requestBody.description)}</p>` : ''}
                                ${this.generateSchemaDisplay(schema)}
                            </div>
    `;
  }

  generateResponsesSection(endpoint) {
    if (!endpoint.responses || Object.keys(endpoint.responses).length === 0) {
      return '';
    }

    const responses = Object.entries(endpoint.responses)
      .sort(([a], [b]) => parseInt(a) - parseInt(b));

    return `
                            <div class="endpoint-section">
                                <h4>Responses</h4>
                                ${responses.map(([status, response]) => `
                                    <div style="margin-bottom: 1rem;">
                                        <strong>HTTP ${status}</strong> - ${this.escapeHtml(response.description || 'No description')}
                                        ${response.schema ? this.generateSchemaDisplay(response.schema) : ''}
                                    </div>
                                `).join('')}
                            </div>
    `;
  }

  generateSchemaDisplay(schema) {
    if (!schema) return '';

    if (schema.$ref) {
      const schemaName = schema.$ref.split('/').pop();
      return `<div class="param-type">â†’ <a href="#schema-${schemaName}">${schemaName}</a></div>`;
    }

    if (schema.type === 'array' && schema.items) {
      return `<div class="param-type">Array&lt;${this.getSchemaType(schema.items)}&gt;</div>`;
    }

    return `<div class="param-type">${this.getSchemaType(schema)}</div>`;
  }

  generateCodeExamples(endpoint) {
    const curlExample = this.generateCurlExample(endpoint);
    const tsExample = this.generateTypeScriptExample(endpoint);

    return `
                            <div class="endpoint-section">
                                <h4>Code Examples</h4>
                                
                                <div class="code-block">
                                    <button class="copy-button" onclick="copyToClipboard(this, 'curl')">Copy</button>
                                    <pre><code>${this.escapeHtml(curlExample)}</code></pre>
                                </div>
                                
                                <div class="code-block">
                                    <button class="copy-button" onclick="copyToClipboard(this, 'typescript')">Copy</button>
                                    <pre><code>${this.escapeHtml(tsExample)}</code></pre>
                                </div>
                            </div>
    `;
  }

  generateCurlExample(endpoint) {
    let curl = `curl -X ${endpoint.method} 'http://localhost:3001${endpoint.path}'`;
    
    // Add headers
    curl += `\n  -H 'Content-Type: application/json'`;
    
    // Add request body example if present
    if (endpoint.requestBody && endpoint.requestBody.schema) {
      curl += `\n  -d '${JSON.stringify(this.generateExampleData(endpoint.requestBody.schema), null, 2)}'`;
    }
    
    return curl;
  }

  generateTypeScriptExample(endpoint) {
    const operationId = endpoint.operationId || this.generateOperationId(endpoint);
    let example = `// Using the generated SpecJet API client
import { ApiClient } from './src/api/client.js';

const api = new ApiClient('http://localhost:3001');

`;

    // Generate method call based on endpoint
    const pathParams = endpoint.parameters?.filter(p => p.in === 'path') || [];
    const queryParams = endpoint.parameters?.filter(p => p.in === 'query') || [];
    
    let methodCall = `const result = await api.${operationId}(`;
    const args = [];

    // Add path parameters
    pathParams.forEach(param => {
      args.push(param.schema?.type === 'integer' ? '123' : `'${param.name}-value'`);
    });

    // Add request body
    if (endpoint.requestBody) {
      const exampleData = this.generateExampleData(endpoint.requestBody.schema);
      args.push(JSON.stringify(exampleData, null, 2));
    }

    // Add query params if present
    if (queryParams.length > 0) {
      const queryExample = {};
      queryParams.forEach(param => {
        queryExample[param.name] = param.schema?.type === 'integer' ? 10 : 'value';
      });
      args.push(JSON.stringify(queryExample, null, 2));
    }

    methodCall += args.join(', ') + ');';
    example += methodCall;

    return example;
  }

  generateMockDataSection(endpoint) {
    if (!this.mockServer) {
      return '';
    }

    try {
      const mockData = this.mockServer.generateMockResponse(endpoint, { scenario: 'demo' });
      return `
                            <div class="endpoint-section">
                                <h4>Mock Response Example</h4>
                                <div class="mock-data">
                                    <div class="code-block">
                                        <pre><code>${this.escapeHtml(JSON.stringify(mockData, null, 2))}</code></pre>
                                    </div>
                                </div>
                            </div>
      `;
    } catch {
      return `
                            <div class="endpoint-section">
                                <h4>Mock Response Example</h4>
                                <div class="mock-data">
                                    <em>Unable to generate mock data for this endpoint</em>
                                </div>
                            </div>
      `;
    }
  }

  generateSchemasSection() {
    return Object.entries(this.schemas).map(([name, schema]) => {
      return `
                    <div id="schema-${name}" class="schema">
                        <div class="schema-header">
                            <h3 class="schema-name">${this.escapeHtml(name)}</h3>
                        </div>
                        <div class="schema-body">
                            ${this.generateSchemaProperties(schema)}
                        </div>
                    </div>
      `;
    }).join('');
  }

  generateSchemaProperties(schema) {
    if (!schema.properties) {
      return `<p class="property-description">Type: ${this.getSchemaType(schema)}</p>`;
    }

    const required = schema.required || [];
    
    return Object.entries(schema.properties).map(([propName, propSchema]) => {
      const isRequired = required.includes(propName);
      
      return `
                            <div class="property">
                                <div class="property-header">
                                    <span class="property-name">${this.escapeHtml(propName)}</span>
                                    <span class="property-type">${this.getSchemaType(propSchema)}</span>
                                    ${isRequired ? '<span class="param-required">Required</span>' : ''}
                                </div>
                                ${propSchema.description ? `<div class="property-description">${this.escapeHtml(propSchema.description)}</div>` : ''}
                            </div>
      `;
    }).join('');
  }

  generateJavaScript() {
    return `
        // Theme management
        function toggleTheme() {
            const body = document.body;
            const currentTheme = body.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            body.setAttribute('data-theme', newTheme);
            localStorage.setItem('specjet-docs-theme', newTheme);
        }

        // Load saved theme
        function loadTheme() {
            const savedTheme = localStorage.getItem('specjet-docs-theme') || 'light';
            document.body.setAttribute('data-theme', savedTheme);
        }


        // Copy to clipboard functionality
        function copyToClipboard(button, type) {
            const codeBlock = button.nextElementSibling.textContent;
            
            if (navigator.clipboard) {
                navigator.clipboard.writeText(codeBlock).then(() => {
                    button.textContent = 'Copied!';
                    setTimeout(() => {
                        button.textContent = 'Copy';
                    }, 2000);
                });
            } else {
                // Fallback for older browsers
                const textarea = document.createElement('textarea');
                textarea.value = codeBlock;
                document.body.appendChild(textarea);
                textarea.select();
                document.execCommand('copy');
                document.body.removeChild(textarea);
                
                button.textContent = 'Copied!';
                setTimeout(() => {
                    button.textContent = 'Copy';
                }, 2000);
            }
        }

        // Active navigation highlighting
        function highlightActiveSection() {
            const sections = document.querySelectorAll('.section, .endpoint');
            const navLinks = document.querySelectorAll('.nav-link');
            
            let current = '';
            
            sections.forEach(section => {
                const sectionTop = section.offsetTop - 150; // Increased offset for better visibility
                if (window.scrollY >= sectionTop) {
                    current = section.getAttribute('id');
                }
            });
            
            navLinks.forEach(link => {
                link.classList.remove('active');
                if (link.getAttribute('href') === '#' + current) {
                    link.classList.add('active');
                }
            });
        }

        // Smooth scroll with proper offset for anchor links
        function smoothScrollToAnchor(event) {
            const link = event.target.closest('a[href^="#"]');
            if (!link) return;
            
            const targetId = link.getAttribute('href').substring(1);
            const targetElement = document.getElementById(targetId);
            
            if (targetElement) {
                event.preventDefault();
                const headerOffset = 130; // Account for sticky header + some padding
                const elementPosition = targetElement.offsetTop;
                const offsetPosition = elementPosition - headerOffset;

                window.scrollTo({
                    top: offsetPosition,
                    behavior: 'smooth'
                });
            }
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            loadTheme();
            window.addEventListener('scroll', highlightActiveSection);
            document.addEventListener('click', smoothScrollToAnchor);
            highlightActiveSection(); // Run once on load
        });
    `;
  }

  // Helper methods
  escapeHtml(text) {
    if (typeof text !== 'string') return '';
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  }

  groupEndpointsByTag() {
    const groups = {};
    
    this.endpoints.forEach(endpoint => {
      const tags = endpoint.tags && endpoint.tags.length > 0 ? endpoint.tags : ['General'];
      
      tags.forEach(tag => {
        if (!groups[tag]) {
          groups[tag] = [];
        }
        groups[tag].push(endpoint);
      });
    });

    return groups;
  }

  generateSectionId(tag) {
    return 'section-' + tag.toLowerCase().replace(/[^a-z0-9]/g, '-');
  }

  generateEndpointId(endpoint) {
    const path = endpoint.path.replace(/[{}]/g, '').replace(/\//g, '-');
    return `endpoint-${endpoint.method.toLowerCase()}-${path}`.replace(/[^a-z0-9-]/g, '');
  }

  generateOperationId(endpoint) {
    if (endpoint.operationId) return endpoint.operationId;
    
    const method = endpoint.method.toLowerCase();
    const pathParts = endpoint.path.split('/').filter(p => p && !p.startsWith('{'));
    const resource = pathParts[pathParts.length - 1] || 'resource';
    
    if (method === 'get' && endpoint.path.includes('{')) {
      return `get${resource.charAt(0).toUpperCase()}${resource.slice(1)}ById`;
    }
    
    return `${method}${resource.charAt(0).toUpperCase()}${resource.slice(1)}`;
  }

  getSchemaType(schema) {
    if (!schema) return 'any';
    
    if (schema.$ref) {
      return schema.$ref.split('/').pop();
    }
    
    if (schema.type === 'array' && schema.items) {
      return `Array<${this.getSchemaType(schema.items)}>`;
    }
    
    if (schema.enum) {
      return `enum: ${schema.enum.join(' | ')}`;
    }
    
    const type = schema.type || 'object';
    if (schema.format) {
      return `${type} (${schema.format})`;
    }
    
    return type;
  }

  generateExampleData(schema, depth = 0) {
    if (depth > 3) return null; // Prevent infinite recursion
    
    if (!schema) return null;
    
    if (schema.$ref) {
      const schemaName = schema.$ref.split('/').pop();
      const referencedSchema = this.schemas[schemaName];
      if (referencedSchema) {
        return this.generateExampleData(referencedSchema, depth + 1);
      }
      return { id: 1, name: 'Example' };
    }
    
    if (schema.enum) {
      return schema.enum[0];
    }
    
    if (schema.type === 'array' && schema.items) {
      return [this.generateExampleData(schema.items, depth + 1)];
    }
    
    if (schema.type === 'object' || schema.properties) {
      const obj = {};
      const properties = schema.properties || {};
      const required = schema.required || [];
      
      Object.entries(properties).forEach(([propName, propSchema]) => {
        obj[propName] = this.generateExampleValue(propName, propSchema);
      });
      
      return obj;
    }
    
    return this.generateExampleValue('value', schema);
  }

  generateExampleValue(propName, schema) {
    const propLower = propName.toLowerCase();
    
    // Smart defaults based on property names
    if (propName === 'id') return 1;
    if (propLower.includes('email')) return 'user@example.com';
    if (propLower.includes('name')) return 'Example Name';
    if (propLower.includes('date') || schema.format === 'date-time') return '2023-01-01T00:00:00Z';
    if (schema.type === 'boolean') return true;
    if (schema.type === 'integer') return 42;
    if (schema.type === 'number') return 3.14;
    
    return 'example value';
  }

  getUniqueTagsCount() {
    const tags = new Set();
    this.endpoints.forEach(endpoint => {
      if (endpoint.tags && endpoint.tags.length > 0) {
        endpoint.tags.forEach(tag => tags.add(tag));
      } else {
        tags.add('General');
      }
    });
    return tags.size;
  }
}

export default HtmlDocumentationGenerator;