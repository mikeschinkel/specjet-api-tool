openapi: 3.0.0
info:
  title: Large API Test Specification
  version: 2.0.0
  description: |
    Large OpenAPI specification for stress testing SpecJet CLI generation capabilities.
    Features:
    - 25+ API endpoints across multiple resource types
    - 15+ schema definitions with complex nested structures
    - Deep nesting (5+ levels in some schemas)
    - Various HTTP methods, parameters, and response types
    - Complex inheritance and composition patterns

servers:
  - url: https://api.large-test.com/v2
    description: Production server
  - url: https://staging-api.large-test.com/v2
    description: Staging server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # User Management Endpoints
  /users:
    get:
      tags: [Users]
      summary: List all users
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: role
          in: query
          schema:
            $ref: '#/components/schemas/UserRole'
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, pending]
        - name: search
          in: query
          schema:
            type: string
            minLength: 2
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'

    post:
      tags: [Users]
      summary: Create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      tags: [Users]
      summary: Get user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'

    put:
      tags: [Users]
      summary: Update user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      tags: [Users]
      summary: Delete user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted

  /users/{userId}/profile:
    get:
      tags: [Users]
      summary: Get user profile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  # Organization Endpoints
  /organizations:
    get:
      tags: [Organizations]
      summary: List organizations
      parameters:
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/OrganizationType'
      responses:
        '200':
          description: List of organizations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'

    post:
      tags: [Organizations]
      summary: Create organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
      responses:
        '201':
          description: Organization created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'

  /organizations/{orgId}:
    get:
      tags: [Organizations]
      summary: Get organization
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDetails'

  /organizations/{orgId}/members:
    get:
      tags: [Organizations]
      summary: List organization members
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Organization members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationMember'

    post:
      tags: [Organizations]
      summary: Add member to organization
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMemberRequest'
      responses:
        '201':
          description: Member added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationMember'

  # Project Management Endpoints
  /projects:
    get:
      tags: [Projects]
      summary: List projects
      parameters:
        - name: orgId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProjectStatus'
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'

    post:
      tags: [Projects]
      summary: Create project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  /projects/{projectId}:
    get:
      tags: [Projects]
      summary: Get project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDetails'

  /projects/{projectId}/tasks:
    get:
      tags: [Tasks]
      summary: List project tasks
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: assigneeId
          in: query
          schema:
            type: string
            format: uuid
        - name: priority
          in: query
          schema:
            $ref: '#/components/schemas/TaskPriority'
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

    post:
      tags: [Tasks]
      summary: Create task
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  # Document Management
  /documents:
    get:
      tags: [Documents]
      summary: List documents
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [pdf, doc, image, video, other]
        - name: category
          in: query
          schema:
            $ref: '#/components/schemas/DocumentCategory'
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'

    post:
      tags: [Documents]
      summary: Upload document
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                metadata:
                  $ref: '#/components/schemas/DocumentMetadata'
      responses:
        '201':
          description: Document uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'

  /documents/{documentId}:
    get:
      tags: [Documents]
      summary: Get document
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Document details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDetails'

  # Analytics Endpoints
  /analytics/users:
    get:
      tags: [Analytics]
      summary: User analytics
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
      responses:
        '200':
          description: User analytics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAnalytics'

  /analytics/projects:
    get:
      tags: [Analytics]
      summary: Project analytics
      responses:
        '200':
          description: Project analytics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectAnalytics'

  # Notification Endpoints
  /notifications:
    get:
      tags: [Notifications]
      summary: List notifications
      parameters:
        - name: read
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'

  /notifications/{notificationId}/mark-read:
    post:
      tags: [Notifications]
      summary: Mark notification as read
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Notification marked as read

  # Settings Endpoints
  /settings/user:
    get:
      tags: [Settings]
      summary: Get user settings
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'

    put:
      tags: [Settings]
      summary: Update user settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettings'
      responses:
        '200':
          description: Settings updated

  /settings/organization/{orgId}:
    get:
      tags: [Settings]
      summary: Get organization settings
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Organization settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationSettings'

  # Search Endpoint
  /search:
    get:
      tags: [Search]
      summary: Global search
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 2
        - name: type
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [users, projects, documents, organizations]
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    # User Schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
        status:
          type: string
          enum: [active, inactive, pending]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [id, email, firstName, lastName, role, status]

    UserRole:
      type: string
      enum: [admin, manager, member, viewer]

    UserDetails:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            profile:
              $ref: '#/components/schemas/UserProfile'
            organizations:
              type: array
              items:
                $ref: '#/components/schemas/OrganizationMembership'
            lastLoginAt:
              type: string
              format: date-time

    UserProfile:
      type: object
      properties:
        avatar:
          type: string
          format: uri
        bio:
          type: string
          maxLength: 500
        location:
          type: string
        website:
          type: string
          format: uri
        socialLinks:
          type: object
          properties:
            linkedin:
              type: string
              format: uri
            twitter:
              type: string
              format: uri
            github:
              type: string
              format: uri
        preferences:
          type: object
          properties:
            theme:
              type: string
              enum: [light, dark, auto]
            language:
              type: string
              default: en
            timezone:
              type: string
            emailNotifications:
              type: boolean
              default: true

    CreateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
        role:
          $ref: '#/components/schemas/UserRole'
        organizationId:
          type: string
          format: uuid
      required: [email, firstName, lastName, role]

    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
        role:
          $ref: '#/components/schemas/UserRole'
        status:
          type: string
          enum: [active, inactive, pending]

    UserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        filters:
          type: object
          properties:
            totalCount:
              type: integer
            activeCount:
              type: integer
            inactiveCount:
              type: integer

    # Organization Schemas
    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/OrganizationType'
        settings:
          $ref: '#/components/schemas/OrganizationSettings'
        memberCount:
          type: integer
        createdAt:
          type: string
          format: date-time
      required: [id, name, type]

    OrganizationType:
      type: string
      enum: [company, nonprofit, government, educational]

    OrganizationDetails:
      allOf:
        - $ref: '#/components/schemas/Organization'
        - type: object
          properties:
            owner:
              $ref: '#/components/schemas/User'
            members:
              type: array
              items:
                $ref: '#/components/schemas/OrganizationMember'
              maxItems: 10
            recentProjects:
              type: array
              items:
                $ref: '#/components/schemas/Project'
              maxItems: 5

    OrganizationMember:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        role:
          type: string
          enum: [owner, admin, member]
        joinedAt:
          type: string
          format: date-time
        permissions:
          type: array
          items:
            type: string

    OrganizationMembership:
      type: object
      properties:
        organization:
          $ref: '#/components/schemas/Organization'
        role:
          type: string
          enum: [owner, admin, member]
        joinedAt:
          type: string
          format: date-time

    CreateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        type:
          $ref: '#/components/schemas/OrganizationType'
      required: [name, type]

    AddMemberRequest:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        role:
          type: string
          enum: [admin, member]
          default: member
      required: [userId]

    # Project Schemas
    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/ProjectStatus'
        organizationId:
          type: string
          format: uuid
        ownerId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
      required: [id, name, status, organizationId, ownerId]

    ProjectStatus:
      type: string
      enum: [planning, active, on_hold, completed, cancelled]

    ProjectDetails:
      allOf:
        - $ref: '#/components/schemas/Project'
        - type: object
          properties:
            owner:
              $ref: '#/components/schemas/User'
            organization:
              $ref: '#/components/schemas/Organization'
            members:
              type: array
              items:
                $ref: '#/components/schemas/User'
            taskStats:
              type: object
              properties:
                total:
                  type: integer
                completed:
                  type: integer
                inProgress:
                  type: integer

    CreateProjectRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        organizationId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
      required: [name, organizationId]

    ProjectListResponse:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Task Schemas
    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [todo, in_progress, review, done]
        priority:
          $ref: '#/components/schemas/TaskPriority'
        assigneeId:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        dueDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
      required: [id, title, status, priority, projectId]

    TaskPriority:
      type: string
      enum: [low, medium, high, urgent]

    CreateTaskRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        description:
          type: string
        priority:
          $ref: '#/components/schemas/TaskPriority'
        assigneeId:
          type: string
          format: uuid
        dueDate:
          type: string
          format: date-time
      required: [title, priority]

    # Document Schemas
    Document:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
        size:
          type: integer
        category:
          $ref: '#/components/schemas/DocumentCategory'
        uploadedBy:
          type: string
          format: uuid
        uploadedAt:
          type: string
          format: date-time
        url:
          type: string
          format: uri
      required: [id, name, type, size]

    DocumentCategory:
      type: string
      enum: [contract, report, presentation, image, other]

    DocumentDetails:
      allOf:
        - $ref: '#/components/schemas/Document'
        - type: object
          properties:
            metadata:
              $ref: '#/components/schemas/DocumentMetadata'
            versions:
              type: array
              items:
                type: object
                properties:
                  version:
                    type: integer
                  uploadedAt:
                    type: string
                    format: date-time
                  size:
                    type: integer

    DocumentMetadata:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        projectId:
          type: string
          format: uuid

    # Settings Schemas
    UserSettings:
      type: object
      properties:
        notifications:
          type: object
          properties:
            email:
              type: boolean
            push:
              type: boolean
            desktop:
              type: boolean
        privacy:
          type: object
          properties:
            profileVisibility:
              type: string
              enum: [public, organization, private]
        preferences:
          type: object
          properties:
            theme:
              type: string
              enum: [light, dark, auto]
            language:
              type: string

    OrganizationSettings:
      type: object
      properties:
        general:
          type: object
          properties:
            allowPublicProjects:
              type: boolean
            requireTwoFactor:
              type: boolean
        integrations:
          type: object
          properties:
            slackWebhook:
              type: string
              format: uri
            githubEnabled:
              type: boolean

    # Analytics Schemas
    UserAnalytics:
      type: object
      properties:
        totalUsers:
          type: integer
        activeUsers:
          type: integer
        newUsers:
          type: integer
        usersByRole:
          type: object
          additionalProperties:
            type: integer
        dailyActiveUsers:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              count:
                type: integer

    ProjectAnalytics:
      type: object
      properties:
        totalProjects:
          type: integer
        activeProjects:
          type: integer
        completedProjects:
          type: integer
        projectsByStatus:
          type: object
          additionalProperties:
            type: integer

    # Notification Schema
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [task_assigned, project_updated, mention, reminder]
        title:
          type: string
        message:
          type: string
        read:
          type: boolean
        createdAt:
          type: string
          format: date-time
        data:
          type: object
          additionalProperties: true

    # Search Schema
    SearchResults:
      type: object
      properties:
        query:
          type: string
        total:
          type: integer
        results:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              id:
                type: string
                format: uuid
              title:
                type: string
              snippet:
                type: string
              score:
                type: number

    # Utility Schemas
    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        pages:
          type: integer
      required: [page, limit, total, pages]

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
      required: [code, message]