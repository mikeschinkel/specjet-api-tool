#!/usr/bin/env node

import { Command } from 'commander';
import commands from '../src/commands/index.js';
import { readFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { ErrorHandler } from '../src/core/errors.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

let packageJson;
try {
  packageJson = JSON.parse(readFileSync(join(__dirname, '../package.json'), 'utf8'));
} catch (error) {
  console.error('Failed to read package.json:', error.message);
  process.exit(1);
}

const program = new Command();

program
  .name('specjet')
  .description('üöÄ SpecJet - Build frontend features immediately, no waiting for backend APIs')
  .version(packageJson.version)
  .option('--verbose', 'Enable verbose output for debugging and error details')
  .option('--config <path>', 'Path to configuration file (default: ./specjet.config.js)')
  .addHelpText('after', `
Examples:
  $ specjet init my-api             Get started with a new project
  $ specjet generate                Generate TypeScript types from contract
  $ specjet mock                    Start mock server with realistic data
  $ specjet docs                    View your API documentation

üöÄ Complete workflow: init ‚Üí generate ‚Üí mock ‚Üí build your frontend!

Documentation:
  https://docs.specjet.dev

For more help on a specific command:
  $ specjet <command> --help
`);

// specjet init [project-name]
program
  .command('init')
  .description('üéØ Initialize a new SpecJet project with contract and configuration')
  .argument('[project-name]', 'Name of the project directory to create (default: current directory)')
  .option('--template <template>', 'Template to use: basic (default: basic)', 'basic')
  .option('--project <id>', 'Link to existing web platform project ID (future feature)')
  .option('--force', 'Overwrite existing files')
  .addHelpText('after', `
Examples:
  $ specjet init                   Initialize in current directory
  $ specjet init my-api            Initialize a new project
  $ specjet init --template basic  Use the basic template (default)

What this creates:
  ‚Ä¢ specjet.config.js     Configuration file
  ‚Ä¢ api-contract.yaml     OpenAPI contract template
  ‚Ä¢ src/types/            Generated TypeScript types directory
  ‚Ä¢ src/api/              Generated API client directory
`)
  .action(commands.init);

// specjet generate [options]
program
  .command('generate')
  .description('üîß Generate TypeScript types and API client from OpenAPI contract')
  .option('-w, --watch', 'Watch mode - automatically regenerate when contract changes')
  .option('-o, --output <dir>', 'Custom output directory for generated files')
  .option('-c, --config <path>', 'Path to configuration file')
  .addHelpText('after', `
Examples:
  $ specjet generate               Generate TypeScript types from contract
  $ specjet generate --watch       Generate and watch for changes
  $ specjet generate --output dist Custom output directory
Generated files:
  ‚Ä¢ src/types/api.ts      TypeScript interfaces for all schemas
  ‚Ä¢ src/api/client.ts     Typed API client with all endpoints

Watch mode:
  Automatically regenerates when your OpenAPI contract changes.
  Perfect for development workflows. Press Ctrl+C to stop watching.
`)
  .action(commands.generate);

// specjet mock [options]
program
  .command('mock')
  .description('üé≠ Start a local mock server with realistic API responses')
  .option('-p, --port <port>', 'Port to run mock server on (default: 3001)', '3001')
  .option('-s, --scenario <scenario>', 'Data scenario: demo|realistic|large|errors (default: demo)', 'demo')
  .option('-c, --config <path>', 'Path to configuration file')
  .addHelpText('after', `
Examples:
  $ specjet mock                       Start mock server on port 3001
  $ specjet mock --port 8080           Start mock server on custom port
  $ specjet mock --scenario realistic  Use varied, realistic data
  $ specjet mock --scenario large      Use large datasets for performance testing
  $ specjet mock --scenario errors     Include error responses for testing

Data Scenarios:
  ‚Ä¢ demo       Small, predictable data perfect for demos and presentations
  ‚Ä¢ realistic  Varied, realistic data that mimics production usage patterns
  ‚Ä¢ large      Large datasets for performance and load testing
  ‚Ä¢ errors     Mix of successful and error responses for robust testing

Features:
  ‚Ä¢ üåê REST API endpoints based on your OpenAPI contract
  ‚Ä¢ üöÄ Fast, realistic mock responses using faker.js
  ‚Ä¢ üåê CORS headers always enabled for frontend development
  ‚Ä¢ üìä Different data scenarios for comprehensive testing
  
  For API documentation, run: specjet docs --port 3002
`)
  .action(commands.mock);

// specjet docs [options]
program
  .command('docs')
  .description('üìñ Start a beautiful documentation server for your API')
  .option('-p, --port <port>', 'Port to run documentation server on (default: 3002)')
  .option('--open', 'Automatically open documentation in browser')
  .option('-o, --output <file>', 'Generate static HTML file instead of starting server (e.g. docs.html)')
  .option('-c, --config <path>', 'Path to configuration file')
  .addHelpText('after', `
Examples:
  $ specjet docs                       Start documentation server on port 3002
  $ specjet docs --port 8080           Start documentation server on custom port
  $ specjet docs --open                Start server and open in browser
  $ specjet docs --output docs.html    Generate static HTML file
  $ specjet docs --output ./dist/api-docs.html  Generate to custom path

Features:
  ‚Ä¢ üìñ Beautiful single-page documentation with all endpoints
  ‚Ä¢ üé® Dark/light theme toggle for comfortable viewing
  ‚Ä¢ üìã Clean sidebar navigation organized by endpoint categories  
  ‚Ä¢ üíª Copy-to-clipboard code examples (curl + TypeScript client)
  ‚Ä¢ üé≠ Mock data preview for each endpoint
  ‚Ä¢ üì± Responsive design that works on desktop and mobile
  ‚Ä¢ ‚ö° Zero dependencies - works offline as a single HTML file

Documentation Features:
  ‚Ä¢ üìä API overview with endpoint and schema statistics
  ‚Ä¢ üîó Complete endpoint documentation with parameters and responses
  ‚Ä¢ üìù Data model schemas with property descriptions and types
  ‚Ä¢ üéØ Smart code examples using your generated TypeScript client
  ‚Ä¢ üìã Clean mock response examples for development
`)
  .action(commands.docs);

// specjet validate <environment>
program
  .command('validate', { hidden: true })
  .description('üîç Validate API implementation against OpenAPI contract')
  .argument('<environment>', 'Environment to validate (staging, dev, local, etc.)')
  .option('--verbose', 'Show detailed validation output and request/response data')
  .option('--timeout <ms>', 'Request timeout in milliseconds (default: 30000)', '30000')
  .option('--output <format>', 'Output format: console, json, markdown (default: console)', 'console')
  .option('--contract <path>', 'Path to OpenAPI contract file (overrides config)')
  .option('-c, --config <path>', 'Path to configuration file')
  .addHelpText('after', `
Examples:
  $ specjet validate staging              Validate against staging environment
  $ specjet validate dev --verbose       Detailed validation output
  $ specjet validate local --timeout 10000  Custom timeout
  $ specjet validate staging --output json   JSON output for CI/CD
  $ specjet validate dev --contract ./api.yaml  Custom contract file

Environment Setup:
  Add environments to your specjet.config.js:

  environments: {
    staging: {
      url: "https://api-staging.example.com",
      headers: {
        "Authorization": "Bearer \${STAGING_TOKEN}",
        "X-API-Version": "2.0"
      }
    },
    dev: {
      url: "https://api-dev.example.com",
      headers: { "X-Debug-Mode": "true" }
    },
    local: {
      url: "http://localhost:8080"
    }
  }

What this validates:
  ‚Ä¢ All endpoints are accessible and return expected status codes
  ‚Ä¢ Response schemas match OpenAPI contract specifications
  ‚Ä¢ Required fields are present in responses
  ‚Ä¢ Data types match schema definitions
  ‚Ä¢ Headers conform to contract requirements

Environment Variables:
  Use \${VARIABLE_NAME} in config for dynamic values:
  - Authorization tokens from CI/CD secrets
  - Environment-specific URLs and settings
  - API keys and client IDs

Exit Codes:
  ‚Ä¢ 0: All validations passed
  ‚Ä¢ 1: Validation failures found
  ‚Ä¢ 2: Configuration or setup errors
`)
  .action(commands.validate);
// 
// // specjet sync (Future)
// program
//   .command('sync')
//   .description('üîÑ Sync contract from web platform (coming in Phase 2)')
//   .option('--force', 'Overwrite local changes without confirmation')
//   .option('--project <id>', 'Project ID to sync from (overrides config)')
//   .addHelpText('after', `
// Examples:
//   $ specjet sync                    Sync from linked project
//   $ specjet sync --force           Overwrite local changes
//   $ specjet sync --project proj_123 Sync from specific project
// 
// Note: This feature requires the SpecJet web platform (Phase 2).
//       Currently, SpecJet CLI works with local OpenAPI files only.
// `)
//   .action(commands.sync);

// Handle uncaught exceptions and rejections
process.on('uncaughtException', (error) => {
  console.error('\nüö® Uncaught Exception:');
  ErrorHandler.handle(error, { verbose: program.opts().verbose });
  process.exit(1);
});

process.on('unhandledRejection', (reason) => {
  console.error('\nüö® Unhandled Promise Rejection:');
  ErrorHandler.handle(reason, { verbose: program.opts().verbose });
  process.exit(1);
});

program.parse();